#!/bin/python3

import sys
import json
import loca
import re
from pathlib import Path

mesh_scale = (0.25, 0.25)

nodes = json.load(open('nodes.json', 'r'))
systems = loca.load(open('systems.json', 'r'))
galaxy = nodes['galaxy_optimised']
coords = {}

obj = {
    'type': 'FeatureCollection',
    'features': []
}

gb = [[None, None], [None, None]]
for i in range(0, len(galaxy['node_ids'])):
    node = str(galaxy['node_ids'][i])
    name = 'Unknown'
    if node in systems.data:
        name = systems.data[node]['title']
    x = galaxy['x_coords'][i]
    y = galaxy['y_coords'][i]
    gb[0][0] = x if gb[0][0] is None else min(gb[0][0], x)
    gb[0][1] = y if gb[0][1] is None else min(gb[0][1], y)
    gb[1][0] = x if gb[1][0] is None else max(gb[1][0], x)
    gb[1][1] = y if gb[1][1] is None else max(gb[1][1], y)
    obj['features'].append({
        'type': 'Feature',
        'properties': {
            'objectid':     node,
            'name':         name,
            'level':        galaxy['levels'][i],
        },
        'geometry': {
            'type': 'Point',
            'coordinates': [x, y],
        },
    })
    coords[node] = [x, y]
print(f"Galaxy bounds: ({gb[0][0]}, {gb[0][1]})-({gb[1][0]}, {gb[1][1]})", file=sys.stderr)

for i in range(0, len(galaxy['source_ids'])):
    obj['features'].append({
        'type': 'Feature',
        'properties': {},
        'geometry': {
            'type': 'LineString',
            'coordinates': [
                coords[str(galaxy['source_ids'][i])],
                coords[str(galaxy['dest_ids'][i])],
            ],
        },
    })

mb = [[None, None], [None, None]]
start = len(obj['features'])
p = Path('obj')
for fo in p.glob('*.obj'):
    print(f"Working on {fo}", file=sys.stderr)
    vertices = [(0, 0, 0)]
    with fo.open('r') as f:
        for line in f:
            match = re.match("v ([-0-9eE.]+) ([-0-9eE.]+) ([-0-9eE.]+)", line)
            if not match:
                continue
            floats = [float(v) for v in match.groups()]
            x = mesh_scale[0] * floats[0]
            y = mesh_scale[1] * -floats[2]
            vertices.append([x, y])
            mb[0][0] = x if mb[0][0] is None else min(mb[0][0], x)
            mb[0][1] = y if mb[0][1] is None else min(mb[0][1], y)
            mb[1][0] = x if mb[1][0] is None else max(mb[1][0], x)
            mb[1][1] = y if mb[1][1] is None else max(mb[1][1], y)
    print(f"Found {len(vertices)} vertices", file=sys.stderr)
    with fo.open('r') as f:
        for line in f:
            match = re.match("f (\d+)/\d+/\d+ (\d+)/\d+/\d+ (\d+)/\d+/\d+", line)
            if not match:
                continue
            indices = [int(v) for v in match.groups()]
            obj['features'].append({
                'type': 'Feature',
                'properties': {},
                'geometry': {
                    'type': 'Polygon',
                    'coordinates': [[
                        vertices[indices[0]],
                        vertices[indices[1]],
                        vertices[indices[2]],
                        vertices[indices[0]],
                    ]],
                },
            })
        print(f"Found {len(obj['features']) - start} faces", file=sys.stderr)
    print(f"Mesh bounds: ({mb[0][0]}, {mb[0][1]})-({mb[1][0]}, {mb[1][1]})", file=sys.stderr)

scale_x = float(gb[1][0] - gb[0][0]) / (mb[1][0] - mb[0][0])
scale_y = float(gb[1][1] - gb[0][1]) / (mb[1][1] - mb[0][1])
print(f"Scale: ({scale_x}, {scale_y})", file=sys.stderr)

json.dump(obj, fp=sys.stdout, indent=2)
print()
