#!/bin/python3

import sys
import json
import loca
import re
from pathlib import Path
from eprint import eprint

def transform(name, x, y, z):
    if name == 'Rogue.obj':
        return [x *  0.22534781079120067 +  623.9358100432041,
                y * -0.22453135841922706 - 1059.4875167327712]
    return [x *  0.33953260812857690150522441401203 +  620.65061007976712362166120182265,
            y * -0.33837323271747048290964894533602 - 1056.58417176272120743560261062940]

nodes = json.load(open('nodes.json', 'r'))
systems = loca.load(open('systems.json', 'r'))
galaxy = nodes['galaxy_optimised']
coords = {}

obj = {
    'type': 'FeatureCollection',
    'features': []
}

gb = [[None, None], [None, None]]
for i in range(0, len(galaxy['node_ids'])):
    node = str(galaxy['node_ids'][i])
    name = 'Unknown'
    if node in systems.data:
        name = systems.data[node]['title']
    x = galaxy['x_coords'][i]
    y = galaxy['y_coords'][i]
    gb[0][0] = x if gb[0][0] is None else min(gb[0][0], x)
    gb[0][1] = y if gb[0][1] is None else min(gb[0][1], y)
    gb[1][0] = x if gb[1][0] is None else max(gb[1][0], x)
    gb[1][1] = y if gb[1][1] is None else max(gb[1][1], y)
    obj['features'].append({
        'type': 'Feature',
        'properties': {
            'objectid':     node,
            'name':         name,
            'level':        galaxy['levels'][i],
        },
        'geometry': {
            'type': 'Point',
            'coordinates': [x, y],
        },
    })
    coords[node] = [x, y]
eprint(f"Galaxy bounds: ({gb[0][0]}, {gb[0][1]})-({gb[1][0]}, {gb[1][1]})")

for i in range(0, len(galaxy['source_ids'])):
    obj['features'].append({
        'type': 'Feature',
        'properties': {},
        'geometry': {
            'type': 'LineString',
            'coordinates': [
                coords[str(galaxy['source_ids'][i])],
                coords[str(galaxy['dest_ids'][i])],
            ],
        },
    })

colors = {
    'Federation.obj': '#0080ff',
    'Romulan.obj':    '#00ff00',
    'Klingon.obj':    '#ff0000',
    'Augment.obj':    '#ffbb00',
    'Rogue.obj':      '#ff00ff',
    'Dominion.obj':   '#8000ff',
}
start = len(obj['features'])
p = Path('obj')
for fo in p.glob('*.obj'):
    eprint(f"Working on {fo}")
    vertices = [(0, 0, 0)]  # OBJ files are 1-indexed, insert a dummy element
    mb = [[None, None], [None, None]]
    with fo.open('r') as f:
        for line in f:
            match = re.match(r'v ([-0-9eE.]+) ([-0-9eE.]+) ([-0-9eE.]+)', line)
            if not match:
                continue
            (x, z, y) = [float(v) for v in match.groups()]
            vertices.append(transform(fo.name, x, y, z))
            mb[0][0] = x if mb[0][0] is None else min(mb[0][0], x)
            mb[0][1] = y if mb[0][1] is None else min(mb[0][1], y)
            mb[1][0] = x if mb[1][0] is None else max(mb[1][0], x)
            mb[1][1] = y if mb[1][1] is None else max(mb[1][1], y)
    eprint(f"Found {len(vertices)} vertices")
    with fo.open('r') as f:
        for line in f:
            match = re.match(r'f (\d+)/\d+/\d+ (\d+)/\d+/\d+ (\d+)/\d+/\d+', line)
            if not match:
                continue
            indices = [int(v) for v in match.groups()]
            feature = {
                'type': 'Feature',
                'properties': {
                    'color': colors.get(fo.name, '#ff0000'),
                },
                'geometry': {
                    'type': 'Polygon',
                    'coordinates': [[
                        vertices[indices[0]],
                        vertices[indices[1]],
                        vertices[indices[2]],
                        vertices[indices[0]],
                    ]],
                },
            }
            obj['features'].append(feature)
        eprint(f"Found {len(obj['features']) - start} faces")
    eprint(f"Mesh bounds: ({mb[0][0]}, {mb[0][1]})-({mb[1][0]}, {mb[1][1]})")

scale_x = float(gb[1][0] - gb[0][0]) / (mb[1][0] - mb[0][0])
scale_y = float(gb[1][1] - gb[0][1]) / (mb[1][1] - mb[0][1])
eprint(f"Scale: ({scale_x}, {scale_y})")

json.dump(obj, fp=sys.stdout, indent=2)
print()
